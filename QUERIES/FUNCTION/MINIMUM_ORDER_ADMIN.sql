CREATE 
	OR REPLACE FUNCTION MINIMUM_ORDER_ADMIN RETURN INTEGER IS 
	X INTEGER;
	ROW_CNT INTEGER;
	RET INTEGER;
	CNT INTEGER;
BEGIN
	RET := 1;
	CNT := 0;
	SELECT
		COUNT( * ) INTO ROW_CNT 
	FROM
		(
		SELECT
			E.ADMIN_ID 
		FROM
			(
			SELECT
				A.ADMIN_ID,
				( SELECT COUNT( O.ADMIN_ID ) FROM ORDER_LIST O WHERE O.ADMIN_ID = A.ADMIN_ID AND O.RECEIVED_DATE IS NULL ) CNT 
			FROM
				ADMIN A 
			) E 
		WHERE
			E.CNT = (
			SELECT
				MIN( F.CNT ) 
			FROM
				(
				SELECT
					A.ADMIN_ID,
					( SELECT COUNT( O.ADMIN_ID ) FROM ORDER_LIST O WHERE O.ADMIN_ID = A.ADMIN_ID AND O.RECEIVED_DATE IS NULL ) CNT 
				FROM
					ADMIN A 
				) F 
			) 
		);
		ROW_CNT := ROW_CNT - 1;
	X := round( dbms_random.value ( 0, ROW_CNT ) );
	FOR R IN (SELECT
	E.ADMIN_ID 
FROM
	(
	SELECT
		A.ADMIN_ID AS "ADMIN_ID",
		( SELECT COUNT( O.ADMIN_ID ) FROM ORDER_LIST O WHERE O.ADMIN_ID = A.ADMIN_ID AND O.RECEIVED_DATE IS NULL ) CNT 
	FROM
		ADMIN A 
	) E 
WHERE
	E.CNT = (
	SELECT
		MIN( F.CNT ) 
	FROM
		(
		SELECT
			A.ADMIN_ID,
			( SELECT COUNT( O.ADMIN_ID ) FROM ORDER_LIST O WHERE O.ADMIN_ID = A.ADMIN_ID AND O.RECEIVED_DATE IS NULL ) CNT 
		FROM
			ADMIN A 
		) F 
	))
	LOOP 
-- 		DBMS_OUTPUT.PUT_LINE(R.ADMIN_ID);
		IF CNT = X THEN
			RET := R.ADMIN_ID;
		END IF;
		CNT := CNT + 1;
	END LOOP;
	RETURN RET;
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE ( 'No data found.' );
	RETURN 0;
	
	WHEN TOO_MANY_ROWS THEN
	DBMS_OUTPUT.PUT_LINE ( 'More than one data found.' );
	RETURN 0;
	
	WHEN OTHERS THEN
	DBMS_OUTPUT.PUT_LINE ( 'Some unknown error occurred.' );
	RETURN 0;
	
END;
/